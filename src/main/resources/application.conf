
# docker run --rm -t -i --net=host -e SCALABOT_ENABLED=true -e 'SCALABOT_ROOMS=xxxxxx_test_room_1' -e SCALABOT_USERNAME=xxxxxx_xxxxxxx -e SCALABOT_PASSWORD=*** -e SCALABOT_MENTIONNAME=scala -e 'SCALABOT_NICKNAME=Scala Bot' davidhoyt/hipchat-bot:0.0.1 /bin/bash
#
# docker run -d --net=host -e SCALABOT_ENABLED=true -e 'SCALABOT_ROOMS=xxxxxx_test_room_1' -e SCALABOT_USERNAME=xxxxxx_xxxxxxx -e SCALABOT_PASSWORD=*** -e SCALABOT_MENTIONNAME=scala -e 'SCALABOT_NICKNAME=Scala Bot' davidhoyt/hipchat-bot:0.0.1

akka.loggers = ["akka.event.slf4j.Slf4jLogger"]

hipchat {
  service-name = "chat.hipchat.com"
  host = "chat.hipchat.com"
  port = 5222
}

bots {
  enable-stdin-bot = true
  scala-bot {
    mention-name = scala
    mention-name = ${?SCALABOT_MENTIONNAME}
    nickname = "Scala Bot"
    nickname = ${?SCALABOT_NICKNAME}
    username = ${?SCALABOT_USERNAME}
    password = ${?SCALABOT_PASSWORD}
    rooms = ${?SCALABOT_ROOMS}
    enabled = true
    enabled = ${?SCALABOT_ENABLED}

    max-lines = 50                #The number of lines before output is truncated
    max-output-length = 10000      #The number of characters before output is truncated
    max-running-time = 10 seconds #How long a computation is allowed to take before forcibly stopping it

    #List of supported dependencies that's output when someone issues the :dependencies command.
    supported-dependencies = [
      """"io.reactivex" %% "rxscala" % "0.24.1"""",
      """"org.scalaz" %% "scalaz-core" % "7.1.2"""",
      """"org.scalaz" %% "scalaz-effect" % "7.1.2"""",
      """"org.scalaz" %% "scalaz-concurrent" % "7.1.2"""",
      """"org.scalaz.stream" %% "scalaz-stream" % "0.7a"""",
      //
      """"com.chuusai" %% "shapeless" % "2.1.0"""",
      """"org.typelevel" %% "shapeless-spire" % "0.3"""",
      """"org.typelevel" %% "shapeless-scalaz" % "0.3"""",
      //
      """"org.spire-math" %% "spire" % "0.9.1"""",
      //
      """"org.scalacheck" %% "scalacheck" % "1.12.2""""
    ]

    #The jars that should not be available in the bot's class path
    blacklist = [
      "logback-classic-1.1.2.jar",
      "logback-core-1.1.2.jar",
      "akka-actor_2.11-2.3.11.jar",
      "akka-slf4j_2.11-2.3.11.jar",
      "scala-logging-api_2.11-2.1.2.jar",
      "scala-logging-slf4j_2.11-2.1.2.jar",
      "config-1.2.1.jar",
      "ficus_2.11-1.1.2.jar",
      "smack-core-4.0.7.jar",
      "smack-extensions-4.0.7jar",
      "smack-tcp-4.0.7.jar",
      "jboss-logging-3.2.1.Final.jar",
      "slf4j-api-1.7.7.jar",
      "wildfly-security-manager-1.1.2.Final.jar",
      "xpp3-1.1.4c.jar"
    ]

    run-on-startup =
      """
        import scalaz._
        import Scalaz._
        import Tags._
        import reflect.runtime.universe.reify
        import org.scalacheck.Prop._
        import rx.lang.scala._
        import scala.language._

        trait figlet {
          import jfiglet._
          import java.net.URL

          val defaultFont = "standard"

          def fontResourcePath(name: String) = s"/figlet/$name.flf"

          def fontResource(name: String): Option[URL] = Option(classOf[FigletFont].getResource(fontResourcePath(name)))

          val fonts: Seq[String] = Seq(
            "3-d",
            "3x5",
            "5lineoblique",
            "acrobatic",
            "alligator",
            "alligator2",
            "alphabet",
            "avatar",
            "banner",
            "banner3-d",
            "banner3",
            "banner4",
            "barbwire",
            "basic",
            "bell",
            "bigchief",
            "binary",
            "broadway",
            "bulbhead",
            "calgphy2",
            "caligraphy",
            "catwalk",
            "chunky",
            "coinstak",
            "colossal",
            "computer",
            "contessa",
            "contrast",
            "cosmic",
            "cosmike",
            "crawford",
            "cricket",
            "cursive",
            "cyberlarge",
            "cybermedium",
            "cybersmall",
            "decimal",
            "diamond",
            "doh",
            "doom",
            "dotmatrix",
            "double",
            "drpepper",
            "dwhistled",
            "eftichess",
            "eftifont",
            "eftipiti",
            "eftirobot",
            "eftitalic",
            "eftiwall",
            "eftiwater",
            "epic",
            "fender",
            "fourtops",
            "fraktur",
            "fuzzy",
            "goofy",
            "gothic",
            "graceful",
            "gradient",
            "graffiti",
            "hex",
            "hollywood",
            "invita",
            "isometric1",
            "isometric2",
            "isometric3",
            "isometric4",
            "italic",
            "jazmine",
            "katakana",
            "kban",
            "l4me",
            "larry3d",
            "lcd",
            "letters",
            "linux",
            "lockergnome",
            "madrid",
            "marquee",
            "maxfour",
            "mike",
            "mirror",
            "nancyj-fancy",
            "nancyj-underlined",
            "nancyj",
            "nipples",
            "nvscript",
            "o8",
            "octal",
            "ogre",
            "os2",
            "pawp",
            "peaks",
            "pebbles",
            "pepper",
            "poison",
            "puffy",
            "pyramid",
            "rectangles",
            "relief",
            "relief2",
            "rev",
            "roman",
            "rot13",
            "rounded",
            "rowancap",
            "rozzo",
            "runyc",
            "sblood",
            "serifcap",
            "short",
            "slant",
            "slide",
            "small",
            "smisome1",
            "smkeyboard",
            "smslant",
            "speed",
            "stacey",
            "stampatello",
            "standard",
            "starwars",
            "stellar",
            "stop",
            "straight",
            "tanja",
            "tengwar",
            "thick",
            "thin",
            "threepoint",
            "ticks",
            "ticksslant",
            "tinker-toy",
            "tombstone",
            "trek",
            "tsalagi",
            "twopoint",
            "univers",
            "usaflag",
            "weird",
            "whimsy"
          )
        }

        object figlet extends figlet {
          import jfiglet._

          def apply(font: String = "standard"): Option[FigletFont] =
            fontResource(font)
              //.orElse(fontResource(defaultFont))
              .map(new FigletFont(_))
        }

        object banner extends figlet {
          def println(line: String, font: String = "standard"): Unit =
            Predef.println(apply(line, font))

          def apply(line: String, font: String = "standard"): String =
            figlet(font).map(_.convert(line)).getOrElse {
              throw new IllegalStateException(s"[ERROR] Unrecognized figlet font.")
            }
        }
      """
  }
}

dev {
  bots {
    scala-bot {
      mention-name = "scala"
      nickname = "Scala Bot"
      username = "xxxxxx_xxxxxxx"
      password = "***"
      rooms = "xxxxxx_test_room_1" #Comma-delimited set of rooms
      enabled = false
    }
  }
}

prod.bots.enable-stdin-bot = false

include file("hipchat.conf")
